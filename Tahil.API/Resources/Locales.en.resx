<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Attachment" xml:space="preserve">
    <value>Attachment</value>
  </data>
  <data name="NotFoundAttachment" xml:space="preserve">
    <value>Attachment is not found</value>
  </data>
  <data name="NotAvailableAttachment" xml:space="preserve">
    <value>Attachment is not available anymore</value>
  </data>
  <data name="CannotBeNull" xml:space="preserve">
    <value>cannot be null</value>
  </data>
  <data name="ConflictBusyTime" xml:space="preserve">
    <value>This time is busy, select another</value>
  </data>
  <data name="Course" xml:space="preserve">
    <value>Course</value>
  </data>
  <data name="CourseHasSchedules" xml:space="preserve">
    <value>Course has schedules, cannot delete</value>
  </data>
  <data name="CourseHasSessions" xml:space="preserve">
    <value>Course has sessions, cannot delete</value>
  </data>
  <data name="CourseHasTeachers" xml:space="preserve">
    <value>Course has teachers, cannot delete</value>
  </data>
  <data name="CourseNameTooLong" xml:space="preserve">
    <value>Course name cannot exceed 100 characters</value>
  </data>
  <data name="CourseNameTooShort" xml:space="preserve">
    <value>Course name must be at least 2 characters</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="EndDate" xml:space="preserve">
    <value>End Date</value>
  </data>
  <data name="Group" xml:space="preserve">
    <value>Group</value>
  </data>
  <data name="GroupHasStudentCantDelete" xml:space="preserve">
    <value>The group has students, You can't delete it</value>
  </data>
  <data name="GroupHasSchedules" xml:space="preserve">
    <value>Group has schedules, cannot delete</value>
  </data>
  <data name="GroupHasSessions" xml:space="preserve">
    <value>Group has sessions, cannot delete</value>
  </data>
  <data name="GroupNameTooLong" xml:space="preserve">
    <value>Group name cannot exceed 100 characters</value>
  </data>
  <data name="GroupNameTooShort" xml:space="preserve">
    <value>Group name must be at least 2 characters</value>
  </data>
  <data name="InvalidCredentials" xml:space="preserve">
    <value>Invalid credentials</value>
  </data>
  <data name="InvalidEmailFormat" xml:space="preserve">
    <value>in invalid format</value>
  </data>
  <data name="InvalidRefreshToken" xml:space="preserve">
    <value>Invalid refresh token</value>
  </data>
  <data name="IsDuplicated" xml:space="preserve">
    <value>is duplicated</value>
  </data>
  <data name="IsNotAvailable" xml:space="preserve">
    <value>is not available anymore</value>
  </data>
  <data name="IsNotFount" xml:space="preserve">
    <value>is not found</value>
  </data>
  <data name="IsRequired" xml:space="preserve">
    <value>is required</value>
  </data>
  <data name="LessonSchedule" xml:space="preserve">
    <value>Lesson Schedule</value>
  </data>
  <data name="MustBePositive" xml:space="preserve">
    <value>must be greater than zero</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PasswordTooShort" xml:space="preserve">
    <value>Password must be at least 6 characters</value>
  </data>
  <data name="PhoneNumber" xml:space="preserve">
    <value>PhoneNumber</value>
  </data>
  <data name="Room" xml:space="preserve">
    <value>Room</value>
  </data>
  <data name="RoomHasSchedules" xml:space="preserve">
    <value>Room has schedules, cannot delete</value>
  </data>
  <data name="RoomHasSessions" xml:space="preserve">
    <value>Room has sessions, cannot delete</value>
  </data>
  <data name="RoomNameTooLong" xml:space="preserve">
    <value>Room name cannot exceed 100 characters</value>
  </data>
  <data name="RoomNameTooShort" xml:space="preserve">
    <value>Room name must be at least 2 characters</value>
  </data>
  <data name="ServerRunning" xml:space="preserve">
    <value>The server is running :)</value>
  </data>
  <data name="StartAndEndDatesValidation" xml:space="preserve">
    <value>Start Date must be less than or equal to End Date.</value>
  </data>
  <data name="StartDate" xml:space="preserve">
    <value>Start Date</value>
  </data>
  <data name="Student" xml:space="preserve">
    <value>Student</value>
  </data>
  <data name="StudentHasGroups" xml:space="preserve">
    <value>Student has groups, cannot delete</value>
  </data>
  <data name="StudentHasAttachments" xml:space="preserve">
    <value>Student has attachments, cannot delete</value>
  </data>
  <data name="StudentNameTooLong" xml:space="preserve">
    <value>Student name cannot exceed 100 characters</value>
  </data>
  <data name="StudentNameTooShort" xml:space="preserve">
    <value>Student name must be at least 2 characters</value>
  </data>
  <data name="StudentQualificationTooLong" xml:space="preserve">
    <value>Student qualification cannot exceed 200 characters</value>
  </data>
  <data name="Teacher" xml:space="preserve">
    <value>Teacher</value>
  </data>
  <data name="TeacherHasCourses" xml:space="preserve">
    <value>Teacher has courses, cannot delete</value>
  </data>
  <data name="TeacherHasAttachments" xml:space="preserve">
    <value>Teacher has attachments, cannot delete</value>
  </data>
  <data name="TeacherNameTooLong" xml:space="preserve">
    <value>Teacher name cannot exceed 100 characters</value>
  </data>
  <data name="TeacherNameTooShort" xml:space="preserve">
    <value>Teacher name must be at least 2 characters</value>
  </data>
  <data name="TeacherExperienceTooLong" xml:space="preserve">
    <value>Teacher experience cannot exceed 500 characters</value>
  </data>
  <data name="TeacherQualificationTooLong" xml:space="preserve">
    <value>Teacher qualification cannot exceed 200 characters</value>
  </data>
  <data name="User" xml:space="preserve">
    <value>User</value>
  </data>
  <data name="UserHasTeachers" xml:space="preserve">
    <value>User has teachers, cannot delete</value>
  </data>
  <data name="UserHasStudents" xml:space="preserve">
    <value>User has students, cannot delete</value>
  </data>
  <data name="Employee" xml:space="preserve">
    <value>Employee</value>
  </data>
  <data name="EmployeeNameTooLong" xml:space="preserve">
    <value>Employee name cannot exceed 100 characters</value>
  </data>
  <data name="EmployeeNameTooShort" xml:space="preserve">
    <value>Employee name must be at least 2 characters</value>
  </data>
</root>