using Quartz;
using Tahil.Common.Helpers;
using Tahil.Domain.Repositories;

namespace Tahil.API.Jobs;

public class ClassSessionGenerationService : IJob
{
    private readonly IClassSessionRepository _classSessionRepository;
    private readonly IUnitOfWork _unitOfWork;
    private readonly ILogger<ClassSessionGenerationService> _logger;

    public ClassSessionGenerationService(
        IClassSessionRepository classSessionRepository,
        IUnitOfWork unitOfWork,
        ILogger<ClassSessionGenerationService> logger)
    {
        _classSessionRepository = classSessionRepository;
        _unitOfWork = unitOfWork;
        _logger = logger;
    }

    public async Task Execute(IJobExecutionContext context)
    {
        var jobStartTime = Date.Now;
        var jobId = context.JobDetail.Key.ToString();
        
        try
        {
            _logger.LogInformation("Starting daily class session generation job. JobId: {JobId}, StartTime: {StartTime}", 
                jobId, jobStartTime);
            
            var result = await _classSessionRepository.AddAutoGeneratedSessionAsync("BackgroundJob");
            
            if (result.IsSuccess)
            {
                await _unitOfWork.SaveChangesAsync();
                _logger.LogInformation("Successfully generated class sessions for the next day. JobId: {JobId}, Duration: {Duration}ms", 
                    jobId, (Date.Now - jobStartTime).TotalMilliseconds);
            }
            else
            {
                _logger.LogError("Failed to generate class sessions. JobId: {JobId}, Error: {Error}", 
                    jobId, result.Error);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error occurred while generating class sessions. JobId: {JobId}, Duration: {Duration}ms", 
                jobId, (Date.Now - jobStartTime).TotalMilliseconds);
            throw; // Re-throw to let Quartz handle the failure
        }
    }
} 