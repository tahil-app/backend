using Tahil.Common.Helpers;
using Tahil.Domain.Enums;

namespace Tahil.Infrastructure.Repositories;

public class ClassSessionRepository : Repository<ClassSession>, IClassSessionRepository
{
    private readonly DbSet<ClassSchedule> scheduleDbSet;

    public ClassSessionRepository(BEContext context) : base(context.Set<ClassSession>())
    {
        scheduleDbSet = context.Set<ClassSchedule>();
    }

    public async Task<Result<bool>> AddAutoGeneratedSessionAsync(string userName)
    {
        var nextDay = Date.Now;
        var nextDate = DateOnly.FromDateTime(nextDay);
        var day = (WeekDays)Enum.Parse(typeof(WeekDays), nextDay.DayOfWeek.ToString());

        // get all schedules for the next day
        var schedules = await scheduleDbSet.Where(s =>
                            s.StartDate <= nextDate &&
                            (s.EndDate == null || s.EndDate >= nextDate) &&
                            s.Day == day
                        ).Include(r => r.Group).ToListAsync();

        if (!schedules.Any())
            return Result.Success(true);

        // Get existing sessions for the next date to avoid duplicates
        var existingSessionScheduleIds = await _dbSet
            .Where(s => s.Date == nextDate)
            .Select(s => s.ScheduleId)
            .ToListAsync();

        var nextSessions = new List<ClassSession>();
        foreach (var schedule in schedules)
        {
            // Skip if session already exists for this schedule and date
            if (existingSessionScheduleIds.Contains(schedule.Id))
                continue;

            var session = new ClassSession
            {
                ScheduleId = schedule.Id,
                CreatedAt = Date.Now,
                CreatedBy = userName,
                UpdatedAt = Date.Now,
                UpdatedBy = userName,
                Status = LessonSessionStatus.Scheduled,
                Date = nextDate,
                TenantId = schedule.TenantId,
                OverrideStartTime = schedule.StartTime,
                OverrideEndTime = schedule.EndTime,
                OverrideRoomId = schedule.RoomId,
                OverrideTeacherId = schedule.Group!.TeacherId
            };
            nextSessions.Add(session);
        }

        if (nextSessions.Any())
        {
            _dbSet.AddRange(nextSessions);
        }

        return Result.Success(true);
    }

}