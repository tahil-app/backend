using Tahil.Common.Helpers;
using Tahil.Domain.Dtos;
using Tahil.Domain.Enums;
using Tahil.Domain.Services;

namespace Tahil.Infrastructure.Repositories;

public class ClassSessionRepository : Repository<ClassSession>, IClassSessionRepository
{
    private readonly DbSet<ClassSchedule> _scheduleDbSet;
    private readonly IApplicationContext _applicationContext;

    public ClassSessionRepository(BEContext context, IApplicationContext applicationContext) : base(context.Set<ClassSession>())
    {
        _scheduleDbSet = context.Set<ClassSchedule>();
        _applicationContext = applicationContext;
    }

    public async Task<Result<bool>> AddAutoGeneratedSessionAsync(string userName)
    {
        var nextDay = Date.Now;
        var nextDate = DateOnly.FromDateTime(nextDay);
        var day = (WeekDays)Enum.Parse(typeof(WeekDays), nextDay.DayOfWeek.ToString());

        // get all schedules for the next day
        var schedules = await _scheduleDbSet.Where(s =>
                            s.StartDate <= nextDate &&
                            (s.EndDate == null || s.EndDate >= nextDate) &&
                            s.Day == day
                        ).Include(r => r.Group).ToListAsync();

        if (!schedules.Any())
            return Result.Success(true);

        // Get existing sessions for the next date to avoid duplicates
        var existingSessionScheduleIds = await _dbSet
            .Where(s => s.Date == nextDate)
            .Select(s => s.ScheduleId)
            .ToListAsync();

        var nextSessions = new List<ClassSession>();
        foreach (var schedule in schedules)
        {
            // Skip if session already exists for this schedule and date
            if (existingSessionScheduleIds.Contains(schedule.Id))
                continue;

            var session = new ClassSession
            {
                ScheduleId = schedule.Id,
                CreatedAt = Date.Now,
                CreatedBy = userName,
                UpdatedAt = Date.Now,
                UpdatedBy = userName,
                Status = LessonSessionStatus.Scheduled,
                Date = nextDate,
                TenantId = schedule.TenantId,
                StartTime = schedule.StartTime,
                EndTime = schedule.EndTime,
                RoomId = schedule.RoomId,
                TeacherId = schedule.Group!.TeacherId
            };
            nextSessions.Add(session);
        }

        if (nextSessions.Any())
        {
            _dbSet.AddRange(nextSessions);
        }

        return Result.Success(true);
    }

    public async Task<Result<List<ClassSessionDto>>> GetClassSessionsAsync()
    {
        var userId = _applicationContext.UserId;
        var userRole = _applicationContext.UserRole;


        var query = _dbSet.Include(r => r.Schedule).ThenInclude(r => r.Group).ThenInclude(g => g.Course).AsQueryable();
        query = query.Include(r => r.Schedule).ThenInclude(r => r.Group).ThenInclude(g => g.Teacher).AsQueryable();
        query = query.Include(r => r.Schedule).ThenInclude(r => r.Room).AsQueryable();

        if (userRole == UserRole.Teacher)
            query = query.Where(r => r.TeacherId == userId && r.Status == LessonSessionStatus.Scheduled);

        if (userRole == UserRole.Student)
            query = query.Where(r => r.Schedule!.Group!.StudentGroups.Any(s => s.StudentId == userId));

        var sessions = await query.Where(r => r.TenantId == _applicationContext.TenantId).ToListAsync();

        var sessionDtos = sessions.Select(s => new ClassSessionDto
        {
            Id = s.Id,
            Date = s.Date,
            ScheduleId = s.ScheduleId,
            Status = s.Status,
            RoomId = s.RoomId!.Value,
            RoomName = s.Room!.Name,
            StartTime = s.StartTime!.Value,
            EndTime = s.EndTime!.Value,
            CourseName = s.Schedule!.Group!.Course!.Name,
            GroupName = s.Schedule.Group.Name,
            TeacherId = s.TeacherId!.Value,
            TeacherName = s.Teacher!.User.Name,
            NumberOfStudents = s.Schedule.Group.StudentGroups.Count
        }).ToList();

        return Result.Success(sessionDtos);
    }
}